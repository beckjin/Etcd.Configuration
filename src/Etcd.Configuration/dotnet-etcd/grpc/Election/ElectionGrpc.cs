// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: election.proto
#pragma warning disable 1591
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace V3Electionpb {
  /// <summary>
  /// The election service exposes client-side election facilities as a gRPC interface.
  /// </summary>
  public static partial class Election
  {
    static readonly string __ServiceName = "v3electionpb.Election";

    static readonly grpc::Marshaller<global::V3Electionpb.CampaignRequest> __Marshaller_CampaignRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::V3Electionpb.CampaignRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::V3Electionpb.CampaignResponse> __Marshaller_CampaignResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::V3Electionpb.CampaignResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::V3Electionpb.ProclaimRequest> __Marshaller_ProclaimRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::V3Electionpb.ProclaimRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::V3Electionpb.ProclaimResponse> __Marshaller_ProclaimResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::V3Electionpb.ProclaimResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::V3Electionpb.LeaderRequest> __Marshaller_LeaderRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::V3Electionpb.LeaderRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::V3Electionpb.LeaderResponse> __Marshaller_LeaderResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::V3Electionpb.LeaderResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::V3Electionpb.ResignRequest> __Marshaller_ResignRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::V3Electionpb.ResignRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::V3Electionpb.ResignResponse> __Marshaller_ResignResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::V3Electionpb.ResignResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::V3Electionpb.CampaignRequest, global::V3Electionpb.CampaignResponse> __Method_Campaign = new grpc::Method<global::V3Electionpb.CampaignRequest, global::V3Electionpb.CampaignResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Campaign",
        __Marshaller_CampaignRequest,
        __Marshaller_CampaignResponse);

    static readonly grpc::Method<global::V3Electionpb.ProclaimRequest, global::V3Electionpb.ProclaimResponse> __Method_Proclaim = new grpc::Method<global::V3Electionpb.ProclaimRequest, global::V3Electionpb.ProclaimResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Proclaim",
        __Marshaller_ProclaimRequest,
        __Marshaller_ProclaimResponse);

    static readonly grpc::Method<global::V3Electionpb.LeaderRequest, global::V3Electionpb.LeaderResponse> __Method_Leader = new grpc::Method<global::V3Electionpb.LeaderRequest, global::V3Electionpb.LeaderResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Leader",
        __Marshaller_LeaderRequest,
        __Marshaller_LeaderResponse);

    static readonly grpc::Method<global::V3Electionpb.LeaderRequest, global::V3Electionpb.LeaderResponse> __Method_Observe = new grpc::Method<global::V3Electionpb.LeaderRequest, global::V3Electionpb.LeaderResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "Observe",
        __Marshaller_LeaderRequest,
        __Marshaller_LeaderResponse);

    static readonly grpc::Method<global::V3Electionpb.ResignRequest, global::V3Electionpb.ResignResponse> __Method_Resign = new grpc::Method<global::V3Electionpb.ResignRequest, global::V3Electionpb.ResignResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Resign",
        __Marshaller_ResignRequest,
        __Marshaller_ResignResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::V3Electionpb.ElectionReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Election</summary>
    public abstract partial class ElectionBase
    {
      /// <summary>
      /// Campaign waits to acquire leadership in an election, returning a LeaderKey
      /// representing the leadership if successful. The LeaderKey can then be used
      /// to issue new values on the election, transactionally guard API requests on
      /// leadership still being held, and resign from the election.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::V3Electionpb.CampaignResponse> Campaign(global::V3Electionpb.CampaignRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Proclaim updates the leader's posted value with a new value.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::V3Electionpb.ProclaimResponse> Proclaim(global::V3Electionpb.ProclaimRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Leader returns the current election proclamation, if any.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::V3Electionpb.LeaderResponse> Leader(global::V3Electionpb.LeaderRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Observe streams election proclamations in-order as made by the election's
      /// elected leaders.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task Observe(global::V3Electionpb.LeaderRequest request, grpc::IServerStreamWriter<global::V3Electionpb.LeaderResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Resign releases election leadership so other campaigners may acquire
      /// leadership on the election.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::V3Electionpb.ResignResponse> Resign(global::V3Electionpb.ResignRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Election</summary>
    public partial class ElectionClient : grpc::ClientBase<ElectionClient>
    {
      /// <summary>Creates a new client for Election</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ElectionClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Election that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ElectionClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ElectionClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ElectionClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Campaign waits to acquire leadership in an election, returning a LeaderKey
      /// representing the leadership if successful. The LeaderKey can then be used
      /// to issue new values on the election, transactionally guard API requests on
      /// leadership still being held, and resign from the election.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::V3Electionpb.CampaignResponse Campaign(global::V3Electionpb.CampaignRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Campaign(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Campaign waits to acquire leadership in an election, returning a LeaderKey
      /// representing the leadership if successful. The LeaderKey can then be used
      /// to issue new values on the election, transactionally guard API requests on
      /// leadership still being held, and resign from the election.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::V3Electionpb.CampaignResponse Campaign(global::V3Electionpb.CampaignRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Campaign, null, options, request);
      }
      /// <summary>
      /// Campaign waits to acquire leadership in an election, returning a LeaderKey
      /// representing the leadership if successful. The LeaderKey can then be used
      /// to issue new values on the election, transactionally guard API requests on
      /// leadership still being held, and resign from the election.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::V3Electionpb.CampaignResponse> CampaignAsync(global::V3Electionpb.CampaignRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CampaignAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Campaign waits to acquire leadership in an election, returning a LeaderKey
      /// representing the leadership if successful. The LeaderKey can then be used
      /// to issue new values on the election, transactionally guard API requests on
      /// leadership still being held, and resign from the election.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::V3Electionpb.CampaignResponse> CampaignAsync(global::V3Electionpb.CampaignRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Campaign, null, options, request);
      }
      /// <summary>
      /// Proclaim updates the leader's posted value with a new value.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::V3Electionpb.ProclaimResponse Proclaim(global::V3Electionpb.ProclaimRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Proclaim(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Proclaim updates the leader's posted value with a new value.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::V3Electionpb.ProclaimResponse Proclaim(global::V3Electionpb.ProclaimRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Proclaim, null, options, request);
      }
      /// <summary>
      /// Proclaim updates the leader's posted value with a new value.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::V3Electionpb.ProclaimResponse> ProclaimAsync(global::V3Electionpb.ProclaimRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ProclaimAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Proclaim updates the leader's posted value with a new value.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::V3Electionpb.ProclaimResponse> ProclaimAsync(global::V3Electionpb.ProclaimRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Proclaim, null, options, request);
      }
      /// <summary>
      /// Leader returns the current election proclamation, if any.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::V3Electionpb.LeaderResponse Leader(global::V3Electionpb.LeaderRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Leader(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Leader returns the current election proclamation, if any.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::V3Electionpb.LeaderResponse Leader(global::V3Electionpb.LeaderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Leader, null, options, request);
      }
      /// <summary>
      /// Leader returns the current election proclamation, if any.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::V3Electionpb.LeaderResponse> LeaderAsync(global::V3Electionpb.LeaderRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return LeaderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Leader returns the current election proclamation, if any.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::V3Electionpb.LeaderResponse> LeaderAsync(global::V3Electionpb.LeaderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Leader, null, options, request);
      }
      /// <summary>
      /// Observe streams election proclamations in-order as made by the election's
      /// elected leaders.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::V3Electionpb.LeaderResponse> Observe(global::V3Electionpb.LeaderRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Observe(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Observe streams election proclamations in-order as made by the election's
      /// elected leaders.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::V3Electionpb.LeaderResponse> Observe(global::V3Electionpb.LeaderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_Observe, null, options, request);
      }
      /// <summary>
      /// Resign releases election leadership so other campaigners may acquire
      /// leadership on the election.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::V3Electionpb.ResignResponse Resign(global::V3Electionpb.ResignRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Resign(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Resign releases election leadership so other campaigners may acquire
      /// leadership on the election.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::V3Electionpb.ResignResponse Resign(global::V3Electionpb.ResignRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Resign, null, options, request);
      }
      /// <summary>
      /// Resign releases election leadership so other campaigners may acquire
      /// leadership on the election.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::V3Electionpb.ResignResponse> ResignAsync(global::V3Electionpb.ResignRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ResignAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Resign releases election leadership so other campaigners may acquire
      /// leadership on the election.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::V3Electionpb.ResignResponse> ResignAsync(global::V3Electionpb.ResignRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Resign, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ElectionClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ElectionClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ElectionBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Campaign, serviceImpl.Campaign)
          .AddMethod(__Method_Proclaim, serviceImpl.Proclaim)
          .AddMethod(__Method_Leader, serviceImpl.Leader)
          .AddMethod(__Method_Observe, serviceImpl.Observe)
          .AddMethod(__Method_Resign, serviceImpl.Resign).Build();
    }

  }
}
#endregion
